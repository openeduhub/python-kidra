#+title: A Unified API for IT's JOINTLY AI Services in Python
#+EXPORT_EXCLUDE_TAGS: noexport

A unified API to the various AI applications we have built as part of the IT's JOINTLY project in order to generate additional or missing metadata.
 
* Utils :noexport:
#+name: format-json
#+begin_src sh :var result="" :results verbatim
echo $result | json
#+end_src

* Build OCI image

An OCI-compliant image can be built in one of two ways:

** Using Nix

Ensure that nix is installed with flakes support. Then, simply run
#+begin_src sh
nix build github:openeduhub/python-kidra
#+end_src

The image will be available as =result= in the current directory.

** Using Docker

The image can also be built without a local nix installation. For this, another docker image, containing a nix installation with flakes support, will be used.
Make sure to be inside of repository before running =build.sh=; it will not work otherwise.
#+begin_src sh
git clone https://github.com/openeduhub/python-kidra.git
cd python-kidra
sh build.sh
#+end_src

The image will be available as =result=.

- Note: in order to reduce the amount of redundant building in future build processes, a persistent build-container =kidra-builder= is created as part of the script. This container will contain a cache of all used artifacts of previous builds. While it is safe to remove it afterwards, this will cause a full re-build when running the script again.

* Load & run the image

Now, load the created image through
#+begin_src sh
docker load -i result
#+end_src

A message will appear to confirm that the image has been loaded, including its name and version.
Now, start the service through
#+begin_src sh
docker run -p 8080:8080 localhost/python-kidra:<version>
#+end_src

* Running as a stand-alone application

This service can also be run and installed as a native ~Nix~ ~Flake~ application. In particular, the following command will run the service locally:
#+begin_src sh
nix run github:openeduhub/python-kidra/separate-packages
#+end_src

* API

Each individual service available through this API is located on another sub-domain.
The input data, and potential parameters, are passed as JSON objects.

** Ping

A simple GET request can be posted to the =_ping= sub-domain. This will return an empty message with status code 200 if the service is running.

#+begin_src sh :results verbatim :exports both
curl -i \
     -X GET \
     localhost:8080/_ping/
#+end_src

#+RESULTS:
: HTTP/1.1 200 OK
: Content-Type: text/html;charset=utf-8
: Server: CherryPy/18.8.0
: Date: Fri, 28 Jul 2023 12:54:44 GMT
: Content-Length: 0
: 

** Text Statistics

Various statistics on a given piece of text, or text from a URL, can be processed through the =text-statistics= sub-domain. For more information, see https://github.com/openeduhub/text-statistics.

The processed JSON fields are
- =text: str=
  The text to be analyzed.
  Required if =url= was not given.
- =url: str=
  The URL from which to fetch the text to be analyzed.
  Required if =text= was not given.
- =reading_speed: float=
  The base reading speed (in words per minute) to use for the calculation of the reading time.
  Optional, with a default value of 200.0.

If =text= and =url= were not given, or no text could be fetched from the given URL, =null= is returned.
Otherwise, a JSON object with the following fields is returned:
- =classification: str=
  A classification of the readability, based on the Flesh readability score.
  Possible values: =Sehr schwer=, =Schwer=, =Mittelschwer=, =Mittel=, =Mittelleicht=, =Leicht=, =Sehr leicht=
- =flesch-ease: float=
  The Flesh readability score.
- =reading-time: float=
  The calculated reading time, in seconds.
- =text: str=
  The text that was analyzed.

*** Examples

#+begin_src sh :results verbatim :exports both :post format-json(result=*this*) :wrap src json
curl -d '{"url": "https://de.wikipedia.org/wiki/Brauereigasthaus_zum_Bären_(Ichenhausen%29"}' \
     -H "Content-Type: application/json" \
     -X POST \
     localhost:8080/text-statistics/
#+end_src

#+RESULTS:
#+begin_src json
{
  "flesh-ease": 38.37922077922076,
  "classification": "Schwer",
  "reading-time": 52.66382947894089,
  "text": "Brauereigasthaus zum Bären (Ichenhausen)\nDas Brauereigasthaus zum Bären in Ichenhausen, einer Stadt im Landkreis Günzburg im bayerischen Regierungsbezirk Schwaben, wurde im 18. Jahrhundert errichtet. Das Gasthaus an der Heinrich-Sinz-Straße 33 ist ein geschütztes Baudenkmal.\nDer Bau mit Schweifgiebel und vier zu zehn Fensterachsen wurde 1823 erweitert. Die Putzornamentik der Fassade ist bereits abgegangen. Das Brauhaus auf dem gleichen Grundstück wurde 1999 abgebrochen, der Brauereigasthof selbst 2016. Das Grundstück ist heute mit drei Mehrfamilienhäusern bebaut.\nLiteratur[Bearbeiten | Quelltext bearbeiten]\n- Bernt von Hagen, Angelika Wegener-Hüssen: Landkreis Günzburg (= Bayerisches Landesamt für Denkmalpflege [Hrsg.]: Denkmäler in Bayern. Band VII.91/1). Karl M. Lipp Verlag, München 2004, ISBN 3-87490-589-6, S. 165."
}
#+end_src

#+begin_src sh :results verbatim :exports both :post format-json(result=*this*) :wrap src json
curl -d '{"text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}' \
     -H "Content-Type: application/json" \
     -X POST \
     localhost:8080/text-statistics/
#+end_src

#+RESULTS:
#+begin_src json
{
  "flesh-ease": 39.510869565217405,
  "classification": "Schwer",
  "reading-time": 29.43450094776071,
  "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
}
#+end_src
